{"version":3,"sources":["firebaseConfig.js","components/Display.js","components/Navigation.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Display","props","info","name","photo","email","creates","lastOnline","Card","className","style","width","padding","Img","variant","src","borderRadius","Body","Title","Text","ListGroup","ListGroupItem","Link","target","href","Button","onClick","signOut","Navigation","Navbar","bg","Brand","Collapse","id","Nav","active","Footer","firebase","App","provider","GoogleAuthProvider","useState","state","user","setUser","then","catch","error","signInWithPopup","res","console","log","displayName","photoURL","creationTime","metadata","lastOnlineTime","lastSignInTime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1f7a214a.chunk.js","sourcesContent":["//own firebase config file library\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAnbTwUAwlMzqyyvApaBdD-a1IB3TT3yag\",\r\n    authDomain: \"ema-john-simple-8df68.firebaseapp.com\",\r\n    databaseURL: \"https://ema-john-simple-8df68.firebaseio.com\",\r\n    projectId: \"ema-john-simple-8df68\",\r\n    storageBucket: \"ema-john-simple-8df68.appspot.com\",\r\n    messagingSenderId: \"303926532311\",\r\n    appId: \"1:303926532311:web:e4ac326e7b0c2c600c7892\"\r\n  };\r\n\r\n  // export firebase config file json data\r\n  export default firebaseConfig;","import React from 'react';\r\nimport { Button, Card, ListGroup, ListGroupItem } from 'react-bootstrap';\r\nimport './style.css';\r\n\r\nconst Display = (props) => {\r\n    const {name,photo,email,creates,lastOnline}=props.info;\r\n    return (\r\n        <Card className=\"\" style={{ width: '28rem', padding:\"15px 20px\" }}>\r\n        <Card.Img variant=\"top\" src={photo} className=\"d-block mx-auto\" style={{width:\"150px\",borderRadius:\"50%\"}} />\r\n        <Card.Body>\r\n            <Card.Title>{name}</Card.Title>\r\n            <Card.Text>\r\n                <h5>{email}</h5>\r\n            \r\n            </Card.Text>\r\n        </Card.Body>\r\n        <ListGroup className=\"list-group-flush\">\r\n            <ListGroupItem> <h5>Creation Time : </h5> {creates} </ListGroupItem>\r\n            <ListGroupItem> <h5>Last Online : </h5> {lastOnline} </ListGroupItem>\r\n             \r\n        </ListGroup>\r\n        <Card.Body className=\"text-center\">\r\n            <Card.Link target=\"_blank\" href=\"https://portfolio-zahid-bracu.netlify.app/\">Portfolio</Card.Link>\r\n            <Card.Link target=\"_blank\" href=\"https://github.com/zahid-bracu\">Github</Card.Link>\r\n        </Card.Body>\r\n        <Button className=\"btn btn-lg btn-danger btn-signout\" onClick={()=>props.signOut()}>Sign Out</Button>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Display;","import React from 'react';\r\nimport { Button, Nav, Form, FormControl, Navbar } from 'react-bootstrap';\r\n\r\n\r\nconst Navigation = () => {\r\n    const logo=\"https://i.ibb.co/H2ytkTL/kisspng-google-logo-business-microsoft-windows-operating-system-5b5cb99edbaff2-003672981532803486899.png\"\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\"> <img src={logo} style={{width:\"45px\"}}/> </Navbar.Brand>\r\n\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"#home\" active>Home</Nav.Link>\r\n                <Nav.Link href=\"https://portfolio-zahid-bracu.netlify.app/\" active>Portfolio</Nav.Link>\r\n                <Nav.Link href=\"https://github.com/zahid-bracu\" active>Github</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n            \r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"text-center\">\r\n            <h5> Copyright 2020, Zahid's Programming Initiative</h5>\r\n            <p>zahid.mym@gmail.com</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, { useState } from 'react'; //import react libraries\nimport './App.css'; //import css design file \nimport * as firebase from \"firebase/app\"; //import firebase library\nimport \"firebase/auth\"; //import firebase authendication library\nimport \"firebase/firestore\"; //import firebase firestore library\nimport firebaseConfig from '../src/firebaseConfig'; //import firebase config library\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Display from './components/Display';\nimport Navigation from './components/Navigation';\nimport Footer from './components/Footer';\n\n// initializing the firebase config library details\nfirebase.initializeApp(firebaseConfig);\n\n\n// \nfunction App() {\n  \n  const provider = new firebase.auth.GoogleAuthProvider();\n  // This provider is fetched from firebase->console->doc->develope(tab)->authendication->web->get started->google-sign-in\n\n  //setting a useState to import data from google-auth\n  const [user,setUser]=useState({\n    name:\"\",\n    photo:\"\",\n    email:\"\",\n    creates:\"\",\n    lastOnline:\"\",\n    state:false\n  })\n\n\n\n  //sign in button function\n  function signIn(){\n    //google-auth provider from firebase->console->doc->develope(tab)->authendication->web->get started->google-sign-in\n    firebase.auth().signInWithPopup(provider)\n    .then(res=>{\n      console.log(res.user);\n      //fetching the datas from google auth\n      const {displayName,photoURL,email}=res.user;\n      var creationTime=res.user.metadata.creationTime;\n      var lastOnlineTime=res.user.metadata.lastSignInTime;\n\n\n      // now setting the data in a object\n      var info={\n        name:displayName,\n        photo:photoURL,\n        email:email,\n        creates:creationTime,\n        lastOnline:lastOnlineTime,\n        state:true\n      }\n      // now passing the object in the useState\n      setUser(info);\n      \n    })\n  }\n   \n  \n  \n  // Log out / sign out button function\n  function signOut(){\n    if(user.state===true){\n      firebase.auth().signOut().then(function() {\n        var info={\n          name:\"\",\n          photo:\"\",\n          email:\"\",\n          creates:\"\",\n          lastOnline:\"\",\n          state:false\n        }\n        setUser(info);\n      }).catch(function(error) {\n        // An error happened.\n      });\n    }\n  }\n   \n\n  if(user.state===true){\n    return (\n      <>\n      <div className=\"App\">\n         <Navigation></Navigation>\n         <h4 id=\"h4-text\" className=\"text-success\">Your are successfully Signed In</h4>\n         <Display signOut={signOut} info={user}></Display>\n          \n      </div>\n      <Footer></Footer>\n      </>\n    );\n  }else{\n    return (\n      <>\n      <div className=\"App\">\n         <Navigation></Navigation>\n         <h4 id=\"h4-text\">Press the Button Below to Sign in Using your Google Account</h4>\n         <button id=\"btn-signin\" className=\"btn btn-success\" onClick={()=>signIn()}>Sign In</button>\n         \n      </div>\n      <Footer></Footer>\n      </>\n    );\n  }\n}\n\n\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}